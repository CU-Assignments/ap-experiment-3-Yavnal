public class Solution {
    
    // Definition for singly-linked list.
    static class ListNode {
        int val;
        ListNode next;
        
        ListNode(int val) {
            this.val = val;
            this.next = null;
        }
    }

    public ListNode rotateRight(ListNode head, int k) {
        if (head == null || head.next == null || k == 0) {
            return head;
        }

        // Step 1: Find the length of the list
        ListNode temp = head;
        int length = 1;
        while (temp.next != null) {
            length++;
            temp = temp.next;
        }
        
        // Step 2: Normalize k (to handle cases where k > length)
        k = k % length;
        if (k == 0) {
            return head;
        }

        // Step 3: Connect the last node to the head to make it circular
        temp.next = head;

        // Step 4: Find the new head and tail after rotation
        int stepsToNewHead = length - k;
        ListNode newTail = head;
        for (int i = 1; i < stepsToNewHead; i++) {
            newTail = newTail.next;
        }

        // The new head will be the next node of the newTail
        ListNode newHead = newTail.next;

        // Step 5: Break the circular link
        newTail.next = null;

        return newHead;
    }

    // Helper function to print the linked list
    public static void printList(ListNode head) {
        ListNode current = head;
        while (current != null) {
            System.out.print(current.val);
            if (current.next != null) {
                System.out.print(" -> ");
            }
            current = current.next;
        }
        System.out.println();
    }

    // Helper function to create a linked list from an array
    public static ListNode createList(int[] arr) {
        ListNode head = new ListNode(arr[0]);
        ListNode current = head;
        for (int i = 1; i < arr.length; i++) {
            current.next = new ListNode(arr[i]);
            current = current.next;
        }
        return head;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        
        // Example 1
        int[] arr = {1, 2, 3, 4, 5};
        ListNode head = createList(arr);
        ListNode result = solution.rotateRight(head, 2);
        
        // Print the rotated list
        printList(result);  // Output: 4 -> 5 -> 1 -> 2 -> 3
    }
}
