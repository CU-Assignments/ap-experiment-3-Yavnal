public class Solution {

    // Definition for singly-linked list.
    static class ListNode {
        int val;
        ListNode next;

        ListNode(int val) {
            this.val = val;
            this.next = null;
        }
    }

    public boolean hasCycle(ListNode head) {
        // Edge case: If the list is empty or has only one node
        if (head == null || head.next == null) {
            return false;
        }

        // Initialize slow and fast pointers
        ListNode slow = head;
        ListNode fast = head;

        // Traverse the linked list with slow and fast pointers
        while (fast != null && fast.next != null) {
            slow = slow.next;        // Move slow by one step
            fast = fast.next.next;   // Move fast by two steps

            // If slow and fast meet, there is a cycle
            if (slow == fast) {
                return true;
            }
        }

        // If fast reaches the end of the list, no cycle is present
        return false;
    }

    // Helper function to print the linked list
    public static void printList(ListNode head) {
        ListNode current = head;
        while (current != null) {
            System.out.print(current.val);
            if (current.next != null) {
                System.out.print(" -> ");
            }
            current = current.next;
        }
        System.out.println();
    }

    // Helper function to create a linked list from an array
    public static ListNode createList(int[] arr, int pos) {
        if (arr.length == 0) {
            return null;
        }

        ListNode head = new ListNode(arr[0]);
        ListNode current = head;
        ListNode cycleNode = null;

        for (int i = 1; i < arr.length; i++) {
            current.next = new ListNode(arr[i]);
            current = current.next;
            // Keep track of the node at the given position (pos)
            if (i == pos) {
                cycleNode = current;
            }
        }

        // If pos is valid, create a cycle by connecting the last node to the cycleNode
        if (cycleNode != null) {
            current.next = cycleNode;
        }

        return head;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        
        // Example 1: Create a linked list with a cycle
        int[] arr = {3, 2, 0, -4};
        int pos = 1; // The cycle connects the tail to the node at index 1
        ListNode head = createList(arr, pos);

        // Check if the list has a cycle
        boolean hasCycle = solution.hasCycle(head);
        System.out.println("Does the list have a cycle? " + hasCycle);  // Output: true
    }
}
